#!/apps/perl/bin/perl
#
# $Id: markworks,v 1.12 2004/12/15 14:12:07 marki Exp $
#
# Takes command line arguments rather than hardcoded parameters. - MCJ 3-17-00
#
# Now deletes empty directories - mcj - 10-4-99
#
$access_time_min = $ARGV[0];
$free_fraction = $ARGV[1];
$disk = $ARGV[2];
undef %file_array;
undef %size_array;
$size_sum = 0;
#
# calculate target to delete
#
open(DF, "df -k $disk |");
$line = <DF>;
$line = <DF>;
@field = split(/\s+/, $line);
$size_tot = $field[1];
$size_avail = $field[3];
$size_delete_target = 1000*($free_fraction*$size_tot - $size_avail);
#
# survey the disk
#
open(FIND, "find $disk |");
while ($file = <FIND>) {
    chomp $file;
    $link = 0; # assume it's not a symbolic link
    $regular = 0; # assume it's not a regular file
    $directory = 0; # assume it's not a directory
    # Don't want to do -f or -s or -d on a link; that updates the link's
    # access time. Note also that -f gives true for a symbolic link.
    if (-l $file) {
	$link = 1; # it's a symbolic link
	lstat $file;
	$access_time = -A _;
	$size = 0; # assume zero size, links are small
    } else {
	if (-f $file) {
	    $regular = 1; # it's a regular file
	    $access_time = -A $file;
	    $size = -s $file;
	} elsif (-d $file) {
	    $directory = 1; # it's a directory
	    $change_time = -C $file;
	}
    }
    if ($regular || $link) {
	if ($access_time > $access_time_min) {
	    # add it to the deletion candidates
	    #print "$access_time $file\n";
	    #print "$size\n";
	    $size_array{$file} = $size;
	    $file_array{$access_time} .= $file . "\n";
	}
    } elsif ($directory) {
	if ($change_time > $access_time_min) {
	    # check whether it is empty and delete it if it is.
	    #print "directory: $file\n";
	    open(DIRLIST, "ls -a $file | wc -l |");
	    $nfiles = <DIRLIST>;
	    chop $nfiles;
	    #print "nfiles=$nfiles\n";
	    # empty directories only contain "." and ".."
	    if ($nfiles == 2) {
		print "removing empty directory $file\n";
		rmdir $file;
	    }
	}
	close(DIRLIST);
    }
}
#
# loop over the files, oldest first, listing them until target reached
#
 fileloop: foreach $access_time (reverse sort numerically keys(%file_array)) {
     last fileloop if $size_sum >= $size_delete_target;
     #print "access_time = $access_time\n";
     #print "file = $file_array{$access_time}\n";
     @files = split(/\n/, $file_array{$access_time});
     foreach $file (@files) {
	 $size = $size_array{$file};
	 $size_sum += $size;
	 print "$file $access_time $size $size_sum $size_delete_target\n";
	 unlink($file) or die "can't unlink $file";
	 last fileloop if $size_sum >= $size_delete_target;
     }
 }
exit 0;

sub numerically {$a <=> $b;}
#
# end of perl script
