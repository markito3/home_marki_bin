#!/apps/perl/bin/perl
#
# $Id: markworks,v 1.21 2005/12/18 00:56:59 marki Exp $
#
# Takes command line arguments rather than hardcoded parameters. - MCJ 3-17-00
#
# Now deletes empty directories - mcj - 10-4-99
#
$access_time_min = $ARGV[0];
$free_fraction = $ARGV[1];
$disk = $ARGV[2];
$fstype = $ARGV[3];
$delete_arg = $ARGV[4];
if ($fstype eq 'panfs') {
    $panfs = 1;
} elsif ($fstype eq 'nfs') {
    $panfs = 0;
} else {
    die "invalid file system type";
}
if ($delete_arg eq 'delete') {
    $delete = 1;
} elsif ($delete_arg eq 'nodelete') {
    $delete = 0;
} else {
    die "invalid delete argument";
}
undef %file_array;
undef %size_array;
$size_sum = 0;
$current_utime = time();
print "current_utime = $current_utime\n";
$seconds_per_day = 60*60*24;
$pan_atime_command = "/usr/local/bin/pan_atime";
if ($fstype eq 'panfs' && ! -f $pan_atime_command) {
    die "error: pan_atime command not found, exiting";
}
#
# calculate target to delete
#
open(DF, "df -k $disk |");
$line = <DF>;
$line = <DF>;
@field = split(/\s+/, $line);
if ($#field == 0) {
    $line = <DF>;
    @field = split(/\s+/, $line);
}
$size_tot = $field[1];
$size_tot_gb = $size_tot/1000000;
$size_avail = $field[3];
$size_avail_gb = $size_avail/1000000;
$size_delete_target = 1000*($free_fraction*$size_tot - $size_avail);
$size_delete_target_gb = $size_delete_target/1000000000;
print "size_tot = $size_tot_gb GB\n";
print "size_avail = $size_avail_gb GB\n";
print "size_delete_target = $size_delete_target_gb GB\n";
if ($size_delete_target <= 0) {
    print "no deletion needed\n";
    exit;
}
#
# survey the disk
#
open(FIND, "find $disk |");
while ($file = <FIND>) {
    chomp $file;
    $link = 0; # assume it's not a symbolic link
    $regular = 0; # assume it's not a regular file
    $directory = 0; # assume it's not a directory
    # Don't want to do -f or -s or -d on a link; that updates the link's
    # access time. Note also that -f gives true for a symbolic link.
    if (-l $file) {
	$link = 1; # it's a symbolic link
	lstat $file;
	$access_time = -A _;
	$size = 0; # assume zero size, links are small
    } else {
	if (-f $file) {
	    $regular = 1; # it's a regular file
	    $access_time = -A $file;
	    # on panasas, if atime appears long, recalculate it with pan_atime
	    # this may show that it was actually accessed more recently
	    if (($access_time > $access_time_min) && $panfs) {
		$file =~ s/\(/\\\(/g;
		$file =~ s/\)/\\\)/g;
		$file =~ s/ /\\ /g;
		$pan_atime = `$pan_atime_command -f %s $file`;
		#print "DEBUG: $pan_atime";
		split(/\s+/, $pan_atime);
		$access_time = ($current_utime - $_[5])/$seconds_per_day;
		# protect against pan_atime glitch, just keep the file if it
                # appears older than 3 years
		if ($access_time > 10000) {
		    print "warning: $file has access time = $access_time, setting it to zero.\n";
		    $access_time = 0;
		}
	    }
	    $size = -s $file;
	} elsif (-d $file) {
	    $directory = 1; # it's a directory
	    $change_time = -C $file;
	}
    }
    #printf "$file, $link, $regular, $directory, $access_time, $size, $change_time\n";
    #if ($regular || $link) {
    if ($regular) { # ignore links for now, i. e., let them be
	if ($access_time > $access_time_min) {
	    # add it to the deletion candidates
	    #print "adding to list: $access_time $file\n";
	    #print "$size\n";
	    $size_array{$file} = $size;
	    $file_array{$access_time} .= $file . "\n";
	}
    } elsif ($directory) {
	if ($change_time > $access_time_min) {
	    if ($delete) {
		if (rmdir $file) {
		    print "removed empty directory $file\n";
		}
	    }
	}
	close(DIRLIST);
    }
}
#
# loop over the files, oldest first, listing them until target reached
#
 fileloop: foreach $access_time (reverse sort numerically keys(%file_array)) {
     last fileloop if $size_sum >= $size_delete_target;
     #print "access_time = $access_time\n";
     #print "file = $file_array{$access_time}\n";
     @files = split(/\n/, $file_array{$access_time});
     foreach $file (@files) {
	 $size = $size_array{$file};
	 $size_sum += $size;
	 printf("%s\t%f days\t%g MB\n", $file, $access_time, $size/1000000);
	 if ($delete) {
	     unlink($file) or die "can't unlink $file";
	 }
	 last fileloop if $size_sum >= $size_delete_target;
     }
 }
exit 0;

sub numerically {$a <=> $b;}
#
# end of perl script
